import express from "express"
import { ChunkExtractor } from "@loadable/server"
import { renderToString } from "react-dom/server"
import { StaticRouter } from "react-router-dom/server"
import { matchPath } from "react-router-dom"
import serialize from "serialize-javascript"

import _App from "./lib/_App"
import routes from "./routes"
import { Layout } from "./app/Layout"
import path from "path"

const app = express()
const port = 3000

// This is the stats file generated by webpack loadable plugin
const serverStatsFile = path.resolve(__dirname, "../server/loadable-stats.json")
const clientStatsFile = path.resolve(__dirname, "../client/loadable-stats.json")

app.use(express.static("dist/client"))

app.get("*", async (req, res) => {
  res.set({ "Content-Type": "text/html; charset=UTF-8" })
  const serverExtractor = new ChunkExtractor({ statsFile: serverStatsFile })

  const clientExtractor = new ChunkExtractor({ statsFile: clientStatsFile })

  const activeRoute = routes.find((route) => matchPath(route.path, req.url))
  let initialProps: any = {}
  if (activeRoute?.getStaticProps) {
    initialProps = {
      [activeRoute.name]: await activeRoute.getStaticProps(req.url),
    }
  }
  const jsx = serverExtractor.collectChunks(
    <StaticRouter location={req.url}>
      <_App routes={routes} globalInitialProps={initialProps} Layout={Layout} />
    </StaticRouter>
  )
  const scriptTags = serverExtractor.getScriptTags()

  console.log({ scriptTags })

  const html = renderToString(jsx)
  console.log({ html })
  res.send(
    `
<html>
<head>
<title>SSR with React Router</title>
${scriptTags}
</head>
<body>
    <!-- It has to be on one line or it will trigger hydration error-->
    <div id="root">${html}</div>
    
    <script>
      import("/bundle.js").then(App => {
       App.default(${serialize(initialProps)})
      })
    </script>
    
    
</body>
</html>`.replace("\n", "")
  )
})

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})
